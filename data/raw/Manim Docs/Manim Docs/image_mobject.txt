image_mobject
Mobjects representing raster images.

Classes

AbstractImageMobject

Automatically filters out black pixels

ImageMobject

Displays an Image from a numpy array or a file.

ImageMobjectFromCamera





AbstractImageMobject
Qualified name: manim.mobject.types.image\_mobject.AbstractImageMobject

class AbstractImageMobject(scale_to_resolution, pixel_array_dtype='uint8', resampling_algorithm=Resampling.BICUBIC, **kwargs)[source]
Bases: Mobject

Automatically filters out black pixels

Parameters:
scale_to_resolution (int) – At this resolution the image is placed pixel by pixel onto the screen, so it will look the sharpest and best. This is a custom parameter of ImageMobject so that rendering a scene with e.g. the --quality low or --quality medium flag for faster rendering won’t effect the position of the image on the screen.

pixel_array_dtype (str)

resampling_algorithm (Resampling)

kwargs (Any)

Methods

get_pixel_array

reset_points

Sets points to be the four image corners.

set_color

Condition is function which takes in one arguments, (x, y, z).

set_resampling_algorithm

Sets the interpolation method for upscaling the image.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

_original__init__(scale_to_resolution, pixel_array_dtype='uint8', resampling_algorithm=Resampling.BICUBIC, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
scale_to_resolution (int)

pixel_array_dtype (str)

resampling_algorithm (Resampling)

kwargs (Any)

Return type:
None

reset_points()[source]
Sets points to be the four image corners.

Return type:
None

set_color(color, alpha=None, family=True)[source]
Condition is function which takes in one arguments, (x, y, z). Here it just recurses to submobjects, but in subclasses this should be further implemented based on the the inner workings of color

set_resampling_algorithm(resampling_algorithm)[source]
Sets the interpolation method for upscaling the image. By default the image is interpolated using bicubic algorithm. This method lets you change it. Interpolation is done internally using Pillow, and the function besides the string constants describing the algorithm accepts the Pillow integer constants.

Parameters:
resampling_algorithm (int) –

An integer constant described in the Pillow library, or one from the RESAMPLING_ALGORITHMS global dictionary, under the following keys:

’bicubic’ or ‘cubic’

’nearest’ or ‘none’

’box’

’bilinear’ or ‘linear’

’hamming’

’lanczos’ or ‘antialias’

Return type:
Self










ImageMobject
Qualified name: manim.mobject.types.image\_mobject.ImageMobject

class ImageMobject(filename_or_array, scale_to_resolution=1080, invert=False, image_mode='RGBA', **kwargs)[source]
Bases: AbstractImageMobject

Displays an Image from a numpy array or a file.

Parameters:
scale_to_resolution (int) – At this resolution the image is placed pixel by pixel onto the screen, so it will look the sharpest and best. This is a custom parameter of ImageMobject so that rendering a scene with e.g. the --quality low or --quality medium flag for faster rendering won’t effect the position of the image on the screen.

filename_or_array (StrPath | npt.NDArray)

invert (bool)

image_mode (str)

kwargs (Any)

Example

Example: ImageFromArray 

../_images/ImageFromArray-1.png
from manim import *

class ImageFromArray(Scene):
    def construct(self):
        image = ImageMobject(np.uint8([[0, 100, 30, 200],
                                       [255, 0, 5, 33]]))
        image.height = 7
        self.add(image)
Make interactive
Changing interpolation style:

Example: ImageInterpolationEx 

../_images/ImageInterpolationEx-1.png
from manim import *

class ImageInterpolationEx(Scene):
    def construct(self):
        img = ImageMobject(np.uint8([[63, 0, 0, 0],
                                        [0, 127, 0, 0],
                                        [0, 0, 191, 0],
                                        [0, 0, 0, 255]
                                        ]))

        img.height = 2
        img1 = img.copy()
        img2 = img.copy()
        img3 = img.copy()
        img4 = img.copy()
        img5 = img.copy()

        img1.set_resampling_algorithm(RESAMPLING_ALGORITHMS["nearest"])
        img2.set_resampling_algorithm(RESAMPLING_ALGORITHMS["lanczos"])
        img3.set_resampling_algorithm(RESAMPLING_ALGORITHMS["linear"])
        img4.set_resampling_algorithm(RESAMPLING_ALGORITHMS["cubic"])
        img5.set_resampling_algorithm(RESAMPLING_ALGORITHMS["box"])
        img1.add(Text("nearest").scale(0.5).next_to(img1,UP))
        img2.add(Text("lanczos").scale(0.5).next_to(img2,UP))
        img3.add(Text("linear").scale(0.5).next_to(img3,UP))
        img4.add(Text("cubic").scale(0.5).next_to(img4,UP))
        img5.add(Text("box").scale(0.5).next_to(img5,UP))

        x= Group(img1,img2,img3,img4,img5)
        x.arrange()
        self.add(x)
Make interactive
Methods

fade

Sets the image's opacity using a 1 - alpha relationship.

get_pixel_array

A simple getter method.

get_style

interpolate_color

Interpolates the array of pixel color values from one ImageMobject into an array of equal size in the target ImageMobject.

set_color

Condition is function which takes in one arguments, (x, y, z).

set_opacity

Sets the image's opacity.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

_original__init__(filename_or_array, scale_to_resolution=1080, invert=False, image_mode='RGBA', **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
filename_or_array (StrPath | npt.NDArray)

scale_to_resolution (int)

invert (bool)

image_mode (str)

kwargs (Any)

Return type:
None

fade(darkness=0.5, family=True)[source]
Sets the image’s opacity using a 1 - alpha relationship.

Parameters:
darkness (float) – The alpha value of the object, 1 being transparent and 0 being opaque.

family (bool) – Whether the submobjects of the ImageMobject should be affected.

Return type:
Self

get_pixel_array()[source]
A simple getter method.

interpolate_color(mobject1, mobject2, alpha)[source]
Interpolates the array of pixel color values from one ImageMobject into an array of equal size in the target ImageMobject.

Parameters:
mobject1 (ImageMobject) – The ImageMobject to transform from.

mobject2 (ImageMobject) – The ImageMobject to transform into.

alpha (float) – Used to track the lerp relationship. Not opacity related.

Return type:
None

set_color(color, alpha=None, family=True)[source]
Condition is function which takes in one arguments, (x, y, z). Here it just recurses to submobjects, but in subclasses this should be further implemented based on the the inner workings of color

set_opacity(alpha)[source]
Sets the image’s opacity.

Parameters:
alpha (float) – The alpha value of the object, 1 being opaque and 0 being transparent.

Return type:
Self














ImageMobjectFromCamera
Qualified name: manim.mobject.types.image\_mobject.ImageMobjectFromCamera

class ImageMobjectFromCamera(camera, default_display_frame_config=None, **kwargs)[source]
Bases: AbstractImageMobject

Methods

add_display_frame

get_pixel_array

interpolate_color

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

Parameters:
default_display_frame_config (dict[str, Any] | None)

kwargs (Any)

_original__init__(camera, default_display_frame_config=None, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
default_display_frame_config (dict[str, Any] | None)

kwargs (Any)

Return type:
None












