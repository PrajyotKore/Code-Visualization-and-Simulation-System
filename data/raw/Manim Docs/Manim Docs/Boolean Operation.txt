Boolean Operation
Difference
Qualified name: manim.mobject.geometry.boolean\_ops.Difference

class Difference(subject, clip, **kwargs)[source]
Bases: _BooleanOps

Subtracts one VMobject from another one.

Parameters:
subject (VMobject) – The 1st VMobject.

clip (VMobject) – The 2nd VMobject

kwargs (Any)

Example

Example: DifferenceExample 

../_images/DifferenceExample-1.png
from manim import *

class DifferenceExample(Scene):
    def construct(self):
        sq = Square(color=RED, fill_opacity=1)
        sq.move_to([-2, 0, 0])
        cr = Circle(color=BLUE, fill_opacity=1)
        cr.move_to([-1.3, 0.7, 0])
        un = Difference(sq, cr, color=GREEN, fill_opacity=1)
        un.move_to([1.5, 0, 0])
        self.add(sq, cr, un)
Make interactive
Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(subject, clip, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
subject (VMobject)

clip (VMobject)

kwargs (Any)

Return type:
None





Exclusion
Qualified name: manim.mobject.geometry.boolean\_ops.Exclusion

class Exclusion(subject, clip, **kwargs)[source]
Bases: _BooleanOps

Find the XOR between two VMobject. This creates a new VMobject consisting of the region covered by exactly one of them.

Parameters:
subject (VMobject) – The 1st VMobject.

clip (VMobject) – The 2nd VMobject

kwargs (Any)

Example

Example: IntersectionExample 

../_images/IntersectionExample-1.png
from manim import *

class IntersectionExample(Scene):
    def construct(self):
        sq = Square(color=RED, fill_opacity=1)
        sq.move_to([-2, 0, 0])
        cr = Circle(color=BLUE, fill_opacity=1)
        cr.move_to([-1.3, 0.7, 0])
        un = Exclusion(sq, cr, color=GREEN, fill_opacity=1)
        un.move_to([1.5, 0.4, 0])
        self.add(sq, cr, un)
Make interactive
Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(subject, clip, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
subject (VMobject)

clip (VMobject)

kwargs (Any)

Return type:
None





Exclusion
Qualified name: manim.mobject.geometry.boolean\_ops.Exclusion

class Exclusion(subject, clip, **kwargs)[source]
Bases: _BooleanOps

Find the XOR between two VMobject. This creates a new VMobject consisting of the region covered by exactly one of them.

Parameters:
subject (VMobject) – The 1st VMobject.

clip (VMobject) – The 2nd VMobject

kwargs (Any)

Example

Example: IntersectionExample 

../_images/IntersectionExample-1.png
from manim import *

class IntersectionExample(Scene):
    def construct(self):
        sq = Square(color=RED, fill_opacity=1)
        sq.move_to([-2, 0, 0])
        cr = Circle(color=BLUE, fill_opacity=1)
        cr.move_to([-1.3, 0.7, 0])
        un = Exclusion(sq, cr, color=GREEN, fill_opacity=1)
        un.move_to([1.5, 0.4, 0])
        self.add(sq, cr, un)
Make interactive
Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(subject, clip, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
subject (VMobject)

clip (VMobject)

kwargs (Any)

Return type:
None




Intersection
Qualified name: manim.mobject.geometry.boolean\_ops.Intersection

class Intersection(*vmobjects, **kwargs)[source]
Bases: _BooleanOps

Find the intersection of two VMobject s. This keeps the parts covered by both VMobject s.

Parameters:
vmobjects (VMobject) – The VMobject to find the intersection.

kwargs (Any)

Raises:
ValueError – If less the 2 VMobject are passed.

Example

Example: IntersectionExample 

../_images/IntersectionExample-2.png
from manim import *

class IntersectionExample(Scene):
    def construct(self):
        sq = Square(color=RED, fill_opacity=1)
        sq.move_to([-2, 0, 0])
        cr = Circle(color=BLUE, fill_opacity=1)
        cr.move_to([-1.3, 0.7, 0])
        un = Intersection(sq, cr, color=GREEN, fill_opacity=1)
        un.move_to([1.5, 0, 0])
        self.add(sq, cr, un)
Make interactive
Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(*vmobjects, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
vmobjects (VMobject)

kwargs (Any)

Return type:
None




Union
Qualified name: manim.mobject.geometry.boolean\_ops.Union

class Union(*vmobjects, **kwargs)[source]
Bases: _BooleanOps

Union of two or more VMobject s. This returns the common region of the VMobject s.

Parameters:
vmobjects (VMobject) – The VMobject s to find the union of.

kwargs (Any)

Raises:
ValueError – If less than 2 VMobject s are passed.

Example

Example: UnionExample 

../_images/UnionExample-1.png
from manim import *

class UnionExample(Scene):
    def construct(self):
        sq = Square(color=RED, fill_opacity=1)
        sq.move_to([-2, 0, 0])
        cr = Circle(color=BLUE, fill_opacity=1)
        cr.move_to([-1.3, 0.7, 0])
        un = Union(sq, cr, color=GREEN, fill_opacity=1)
        un.move_to([1.5, 0.3, 0])
        self.add(sq, cr, un)
Make interactive
Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(*vmobjects, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
vmobjects (VMobject)

kwargs (Any)

Return type:
None




Union
Qualified name: manim.mobject.geometry.boolean\_ops.Union

class Union(*vmobjects, **kwargs)[source]
Bases: _BooleanOps

Union of two or more VMobject s. This returns the common region of the VMobject s.

Parameters:
vmobjects (VMobject) – The VMobject s to find the union of.

kwargs (Any)

Raises:
ValueError – If less than 2 VMobject s are passed.

Example

Example: UnionExample 

../_images/UnionExample-1.png
from manim import *

class UnionExample(Scene):
    def construct(self):
        sq = Square(color=RED, fill_opacity=1)
        sq.move_to([-2, 0, 0])
        cr = Circle(color=BLUE, fill_opacity=1)
        cr.move_to([-1.3, 0.7, 0])
        un = Union(sq, cr, color=GREEN, fill_opacity=1)
        un.move_to([1.5, 0.3, 0])
        self.add(sq, cr, un)
Make interactive
Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(*vmobjects, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
vmobjects (VMobject)

kwargs (Any)

Return type:
None





Union
Qualified name: manim.mobject.geometry.boolean\_ops.Union

class Union(*vmobjects, **kwargs)[source]
Bases: _BooleanOps

Union of two or more VMobject s. This returns the common region of the VMobject s.

Parameters:
vmobjects (VMobject) – The VMobject s to find the union of.

kwargs (Any)

Raises:
ValueError – If less than 2 VMobject s are passed.

Example

Example: UnionExample 

../_images/UnionExample-1.png
from manim import *

class UnionExample(Scene):
    def construct(self):
        sq = Square(color=RED, fill_opacity=1)
        sq.move_to([-2, 0, 0])
        cr = Circle(color=BLUE, fill_opacity=1)
        cr.move_to([-1.3, 0.7, 0])
        un = Union(sq, cr, color=GREEN, fill_opacity=1)
        un.move_to([1.5, 0.3, 0])
        self.add(sq, cr, un)
Make interactive
Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(*vmobjects, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
vmobjects (VMobject)

kwargs (Any)

Return type:
None




