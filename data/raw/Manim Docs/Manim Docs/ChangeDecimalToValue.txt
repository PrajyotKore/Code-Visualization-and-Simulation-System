ChangeDecimalToValue
Qualified name: manim.animation.numbers.ChangeDecimalToValue

class ChangeDecimalToValue(mobject=None, *args, use_override=True, **kwargs)[source]
Bases: ChangingDecimal

Methods

Attributes

run_time

Parameters:
decimal_mob (DecimalNumber)

target_number (int)

_original__init__(decimal_mob, target_number, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
decimal_mob (DecimalNumber)

target_number (int)

Return type:
None






ChangingDecimal
Qualified name: manim.animation.numbers.ChangingDecimal

class ChangingDecimal(mobject=None, *args, use_override=True, **kwargs)[source]
Bases: Animation

Methods

check_validity_of_input

interpolate_mobject

Interpolates the mobject of the Animation based on alpha value.

Attributes

run_time

Parameters:
decimal_mob (DecimalNumber)

number_update_func (Callable[[float], float])

suspend_mobject_updating (bool | None)

_original__init__(decimal_mob, number_update_func, suspend_mobject_updating=False, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
decimal_mob (DecimalNumber)

number_update_func (Callable[[float], float])

suspend_mobject_updating (bool | None)

Return type:
None

interpolate_mobject(alpha)[source]
Interpolates the mobject of the Animation based on alpha value.

Parameters:
alpha (float) â€“ A float between 0 and 1 expressing the ratio to which the animation is completed. For example, alpha-values of 0, 0.5, and 1 correspond to the animation being completed 0%, 50%, and 100%, respectively.

Return type:
None





AnnotationDot
Qualified name: manim.mobject.geometry.arc.AnnotationDot

class AnnotationDot(radius=0.10400000000000001, stroke_width=5, stroke_color=ManimColor('#FFFFFF'), fill_color=ManimColor('#58C4DD'), **kwargs)[source]
Bases: Dot

A dot with bigger radius and bold stroke to annotate scenes.

Methods

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

Parameters:
radius (float)

stroke_width (float)

stroke_color (ParsableManimColor)

fill_color (ParsableManimColor)

kwargs (Any)

_original__init__(radius=0.10400000000000001, stroke_width=5, stroke_color=ManimColor('#FFFFFF'), fill_color=ManimColor('#58C4DD'), **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
radius (float)

stroke_width (float)

stroke_color (ParsableManimColor)

fill_color (ParsableManimColor)

kwargs (Any)

Return type:
None


