value_tracker
Simple mobjects that can be used for storing (and updating) a value.

Classes

ComplexValueTracker

Tracks a complex-valued parameter.

ValueTracker

A mobject that can be used for tracking (real-valued) parameters.

ComplexValueTracker
Qualified name: manim.mobject.value\_tracker.ComplexValueTracker

class ComplexValueTracker(value=0, **kwargs)[source]
Bases: ValueTracker

Tracks a complex-valued parameter.

When the value is set through animate, the value will take a straight path from the source point to the destination point.

Examples

Example: ComplexValueTrackerExample 

from manim import *

class ComplexValueTrackerExample(Scene):
    def construct(self):
        tracker = ComplexValueTracker(-2+1j)
        dot = Dot().add_updater(
            lambda x: x.move_to(tracker.points)
        )

        self.add(NumberPlane(), dot)

        self.play(tracker.animate.set_value(3+2j))
        self.play(tracker.animate.set_value(tracker.get_value() * 1j))
        self.play(tracker.animate.set_value(tracker.get_value() - 2j))
        self.play(tracker.animate.set_value(tracker.get_value() / (-2 + 3j)))
Make interactive
Methods

get_value

Get the current value of this value tracker as a complex number.

set_value

Sets a new complex value to the ComplexValueTracker

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

_original__init__(value=0, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

get_value()[source]
Get the current value of this value tracker as a complex number.

The value is internally stored as a points array [a, b, 0]. This can be accessed directly to represent the value geometrically, see the usage example.

set_value(z)[source]
Sets a new complex value to the ComplexValueTracker












ValueTracker
Qualified name: manim.mobject.value\_tracker.ValueTracker

class ValueTracker(value=0, **kwargs)[source]
Bases: Mobject

A mobject that can be used for tracking (real-valued) parameters. Useful for animating parameter changes.

Not meant to be displayed. Instead the position encodes some number, often one which another animation or continual_animation uses for its update function, and by treating it as a mobject it can still be animated and manipulated just like anything else.

This value changes continuously when animated using the animate syntax.

Examples

Example: ValueTrackerExample 

from manim import *

class ValueTrackerExample(Scene):
    def construct(self):
        number_line = NumberLine()
        pointer = Vector(DOWN)
        label = MathTex("x").add_updater(lambda m: m.next_to(pointer, UP))

        tracker = ValueTracker(0)
        pointer.add_updater(
            lambda m: m.next_to(
                        number_line.n2p(tracker.get_value()),
                        UP
                    )
        )
        self.add(number_line, pointer,label)
        tracker += 1.5
        self.wait(1)
        tracker -= 4
        self.wait(0.5)
        self.play(tracker.animate.set_value(5))
        self.wait(0.5)
        self.play(tracker.animate.set_value(3))
        self.play(tracker.animate.increment_value(-2))
        self.wait(0.5)
Make interactive
Note

You can also link ValueTrackers to updaters. In this case, you have to make sure that the ValueTracker is added to the scene by add

Example: ValueTrackerExample 

from manim import *

class ValueTrackerExample(Scene):
    def construct(self):
        tracker = ValueTracker(0)
        label = Dot(radius=3).add_updater(lambda x : x.set_x(tracker.get_value()))
        self.add(label)
        self.add(tracker)
        tracker.add_updater(lambda mobject, dt: mobject.increment_value(dt))
        self.wait(2)
Make interactive
Methods

get_value

Get the current value of this ValueTracker.

increment_value

Increments (adds) a scalar value to the ValueTracker

interpolate

Turns self into an interpolation between mobject1 and mobject2.

set_value

Sets a new scalar value to the ValueTracker

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

depth

The depth of the mobject.

height

The height of the mobject.

width

The width of the mobject.

_original__init__(value=0, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

get_value()[source]
Get the current value of this ValueTracker.

Return type:
float

increment_value(d_value)[source]
Increments (adds) a scalar value to the ValueTracker

Parameters:
d_value (float)

interpolate(mobject1, mobject2, alpha, path_func=<function interpolate>)[source]
Turns self into an interpolation between mobject1 and mobject2.

set_value(value)[source]
Sets a new scalar value to the ValueTracker

Parameters:
value (float)







ArrowVectorField
Qualified name: manim.mobject.vector\_field.ArrowVectorField

class ArrowVectorField(func, color=None, color_scheme=None, min_color_scheme_value=0, max_color_scheme_value=2, colors=[ManimColor('#236B8E'), ManimColor('#83C167'), ManimColor('#FFFF00'), ManimColor('#FC6255')], x_range=None, y_range=None, z_range=None, three_dimensions=False, length_func=<function ArrowVectorField.<lambda>>, opacity=1.0, vector_config=None, **kwargs)[source]
Bases: VectorField

A VectorField represented by a set of change vectors.

Vector fields are always based on a function defining the Vector at every position. The values of this functions is displayed as a grid of vectors. By default the color of each vector is determined by it’s magnitude. Other color schemes can be used however.

Parameters:
func (Callable[[np.ndarray], np.ndarray]) – The function defining the rate of change at every position of the vector field.

color (ParsableManimColor | None) – The color of the vector field. If set, position-specific coloring is disabled.

color_scheme (Callable[[np.ndarray], float] | None) – A function mapping a vector to a single value. This value gives the position in the color gradient defined using min_color_scheme_value, max_color_scheme_value and colors.

min_color_scheme_value (float) – The value of the color_scheme function to be mapped to the first color in colors. Lower values also result in the first color of the gradient.

max_color_scheme_value (float) – The value of the color_scheme function to be mapped to the last color in colors. Higher values also result in the last color of the gradient.

colors (Sequence[ParsableManimColor]) – The colors defining the color gradient of the vector field.

x_range (Sequence[float]) – A sequence of x_min, x_max, delta_x

y_range (Sequence[float]) – A sequence of y_min, y_max, delta_y

z_range (Sequence[float]) – A sequence of z_min, z_max, delta_z

three_dimensions (bool) – Enables three_dimensions. Default set to False, automatically turns True if z_range is not None.

length_func (Callable[[float], float]) – The function determining the displayed size of the vectors. The actual size of the vector is passed, the returned value will be used as display size for the vector. By default this is used to cap the displayed size of vectors to reduce the clutter.

opacity (float) – The opacity of the arrows.

vector_config (dict | None) – Additional arguments to be passed to the Vector constructor

kwargs – Additional arguments to be passed to the VGroup constructor

Examples

Example: BasicUsage 

../_images/BasicUsage-1.png
from manim import *

class BasicUsage(Scene):
    def construct(self):
        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3
        self.add(ArrowVectorField(func))
Make interactive
Example: SizingAndSpacing 

from manim import *

class SizingAndSpacing(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT
        vf = ArrowVectorField(func, x_range=[-7, 7, 1])
        self.add(vf)
        self.wait()

        length_func = lambda x: x / 3
        vf2 = ArrowVectorField(func, x_range=[-7, 7, 1], length_func=length_func)
        self.play(vf.animate.become(vf2))
        self.wait()
Make interactive
Example: Coloring 

../_images/Coloring-1.png
from manim import *

class Coloring(Scene):
    def construct(self):
        func = lambda pos: pos - LEFT * 5
        colors = [RED, YELLOW, BLUE, DARK_GRAY]
        min_radius = Circle(radius=2, color=colors[0]).shift(LEFT * 5)
        max_radius = Circle(radius=10, color=colors[-1]).shift(LEFT * 5)
        vf = ArrowVectorField(
            func, min_color_scheme_value=2, max_color_scheme_value=10, colors=colors
        )
        self.add(vf, min_radius, max_radius)
Make interactive
Methods

get_vector

Creates a vector in the vector field.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(func, color=None, color_scheme=None, min_color_scheme_value=0, max_color_scheme_value=2, colors=[ManimColor('#236B8E'), ManimColor('#83C167'), ManimColor('#FFFF00'), ManimColor('#FC6255')], x_range=None, y_range=None, z_range=None, three_dimensions=False, length_func=<function ArrowVectorField.<lambda>>, opacity=1.0, vector_config=None, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
func (Callable[[np.ndarray], np.ndarray])

color (ParsableManimColor | None)

color_scheme (Callable[[np.ndarray], float] | None)

min_color_scheme_value (float)

max_color_scheme_value (float)

colors (Sequence[ParsableManimColor])

x_range (Sequence[float])

y_range (Sequence[float])

z_range (Sequence[float])

three_dimensions (bool)

length_func (Callable[[float], float])

opacity (float)

vector_config (dict | None)

get_vector(point)[source]
Creates a vector in the vector field.

The created vector is based on the function of the vector field and is rooted in the given point. Color and length fit the specifications of this vector field.

Parameters:
point (ndarray) – The root point of the vector.






StreamLines
Qualified name: manim.mobject.vector\_field.StreamLines

class StreamLines(func, color=None, color_scheme=None, min_color_scheme_value=0, max_color_scheme_value=2, colors=[ManimColor('#236B8E'), ManimColor('#83C167'), ManimColor('#FFFF00'), ManimColor('#FC6255')], x_range=None, y_range=None, z_range=None, three_dimensions=False, noise_factor=None, n_repeats=1, dt=0.05, virtual_time=3, max_anchors_per_line=100, padding=3, stroke_width=1, opacity=1, **kwargs)[source]
Bases: VectorField

StreamLines represent the flow of a VectorField using the trace of moving agents.

Vector fields are always based on a function defining the vector at every position. The values of this functions is displayed by moving many agents along the vector field and showing their trace.

Parameters:
func (Callable[[np.ndarray], np.ndarray]) – The function defining the rate of change at every position of the vector field.

color (ParsableManimColor | None) – The color of the vector field. If set, position-specific coloring is disabled.

color_scheme (Callable[[np.ndarray], float] | None) – A function mapping a vector to a single value. This value gives the position in the color gradient defined using min_color_scheme_value, max_color_scheme_value and colors.

min_color_scheme_value (float) – The value of the color_scheme function to be mapped to the first color in colors. Lower values also result in the first color of the gradient.

max_color_scheme_value (float) – The value of the color_scheme function to be mapped to the last color in colors. Higher values also result in the last color of the gradient.

colors (Sequence[ParsableManimColor]) – The colors defining the color gradient of the vector field.

x_range (Sequence[float]) – A sequence of x_min, x_max, delta_x

y_range (Sequence[float]) – A sequence of y_min, y_max, delta_y

z_range (Sequence[float]) – A sequence of z_min, z_max, delta_z

three_dimensions (bool) – Enables three_dimensions. Default set to False, automatically turns True if z_range is not None.

noise_factor (float | None) – The amount by which the starting position of each agent is altered along each axis. Defaults to delta_y / 2 if not defined.

n_repeats – The number of agents generated at each starting point.

dt – The factor by which the distance an agent moves per step is stretched. Lower values result in a better approximation of the trajectories in the vector field.

virtual_time – The time the agents get to move in the vector field. Higher values therefore result in longer stream lines. However, this whole time gets simulated upon creation.

max_anchors_per_line – The maximum number of anchors per line. Lines with more anchors get reduced in complexity, not in length.

padding – The distance agents can move out of the generation area before being terminated.

stroke_width – The stroke with of the stream lines.

opacity – The opacity of the stream lines.

Examples

Example: BasicUsage 

../_images/BasicUsage-2.png
from manim import *

class BasicUsage(Scene):
    def construct(self):
        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3
        self.add(StreamLines(func))
Make interactive
Example: SpawningAndFlowingArea 

../_images/SpawningAndFlowingArea-1.png
from manim import *

class SpawningAndFlowingArea(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0]) * UR + np.cos(pos[1]) * LEFT + pos / 5
        stream_lines = StreamLines(
            func, x_range=[-3, 3, 0.2], y_range=[-2, 2, 0.2], padding=1
        )

        spawning_area = Rectangle(width=6, height=4)
        flowing_area = Rectangle(width=8, height=6)
        labels = [Tex("Spawning Area"), Tex("Flowing Area").shift(DOWN * 2.5)]
        for lbl in labels:
            lbl.add_background_rectangle(opacity=0.6, buff=0.05)

        self.add(stream_lines, spawning_area, flowing_area, *labels)
Make interactive
Methods

create

The creation animation of the stream lines.

end_animation

End the stream line animation smoothly.

start_animation

Animates the stream lines using an updater.

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(func, color=None, color_scheme=None, min_color_scheme_value=0, max_color_scheme_value=2, colors=[ManimColor('#236B8E'), ManimColor('#83C167'), ManimColor('#FFFF00'), ManimColor('#FC6255')], x_range=None, y_range=None, z_range=None, three_dimensions=False, noise_factor=None, n_repeats=1, dt=0.05, virtual_time=3, max_anchors_per_line=100, padding=3, stroke_width=1, opacity=1, **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
func (Callable[[np.ndarray], np.ndarray])

color (ParsableManimColor | None)

color_scheme (Callable[[np.ndarray], float] | None)

min_color_scheme_value (float)

max_color_scheme_value (float)

colors (Sequence[ParsableManimColor])

x_range (Sequence[float])

y_range (Sequence[float])

z_range (Sequence[float])

three_dimensions (bool)

noise_factor (float | None)

create(lag_ratio=None, run_time=None, **kwargs)[source]
The creation animation of the stream lines.

The stream lines appear in random order.

Parameters:
lag_ratio (float | None) – The lag ratio of the animation. If undefined, it will be selected so that the total animation length is 1.5 times the run time of each stream line creation.

run_time (Callable[[float], float] | None) – The run time of every single stream line creation. The runtime of the whole animation might be longer due to the lag_ratio. If undefined, the virtual time of the stream lines is used as run time.

Returns:
The creation animation of the stream lines.

Return type:
AnimationGroup

Examples

Example: StreamLineCreation 

from manim import *

class StreamLineCreation(Scene):
    def construct(self):
        func = lambda pos: (pos[0] * UR + pos[1] * LEFT) - pos
        stream_lines = StreamLines(
            func,
            color=YELLOW,
            x_range=[-7, 7, 1],
            y_range=[-4, 4, 1],
            stroke_width=3,
            virtual_time=1,  # use shorter lines
            max_anchors_per_line=5,  # better performance with fewer anchors
        )
        self.play(stream_lines.create())  # uses virtual_time as run_time
        self.wait()
Make interactive
end_animation()[source]
End the stream line animation smoothly.

Returns an animation resulting in fully displayed stream lines without a noticeable cut.

Returns:
The animation fading out the running stream animation.

Return type:
AnimationGroup

Raises:
ValueError – if no stream line animation is running

Examples

Example: EndAnimation 

from manim import *

class EndAnimation(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT
        stream_lines = StreamLines(
            func, stroke_width=3, max_anchors_per_line=5, virtual_time=1, color=BLUE
        )
        self.add(stream_lines)
        stream_lines.start_animation(warm_up=False, flow_speed=1.5, time_width=0.5)
        self.wait(1)
        self.play(stream_lines.end_animation())
Make interactive
start_animation(warm_up=True, flow_speed=1, time_width=0.3, rate_func=<function linear>, line_animation_class=<class 'manim.animation.indication.ShowPassingFlash'>, **kwargs)[source]
Animates the stream lines using an updater.

The stream lines will continuously flow

Parameters:
warm_up (bool) – If True the animation is initialized line by line. Otherwise it starts with all lines shown.

flow_speed (float) – At flow_speed=1 the distance the flow moves per second is equal to the magnitude of the vector field along its path. The speed value scales the speed of this flow.

time_width (float) – The proportion of the stream line shown while being animated

rate_func (Callable[[float], float]) – The rate function of each stream line flashing

line_animation_class (type[ShowPassingFlash]) – The animation class being used

Return type:
None

Examples

Example: ContinuousMotion 

from manim import *

class ContinuousMotion(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[0] / 2) * UR + np.cos(pos[1] / 2) * LEFT
        stream_lines = StreamLines(func, stroke_width=3, max_anchors_per_line=30)
        self.add(stream_lines)
        stream_lines.start_animation(warm_up=False, flow_speed=1.5)
        self.wait(stream_lines.virtual_time / stream_lines.flow_speed)







VectorField
Qualified name: manim.mobject.vector\_field.VectorField

class VectorField(func, color=None, color_scheme=None, min_color_scheme_value=0, max_color_scheme_value=2, colors=[ManimColor('#236B8E'), ManimColor('#83C167'), ManimColor('#FFFF00'), ManimColor('#FC6255')], **kwargs)[source]
Bases: VGroup

A vector field.

Vector fields are based on a function defining a vector at every position. This class does by default not include any visible elements but provides methods to move other Mobject s along the vector field.

Parameters:
func (Callable[[np.ndarray], np.ndarray]) – The function defining the rate of change at every position of the VectorField.

color (ParsableManimColor | None) – The color of the vector field. If set, position-specific coloring is disabled.

color_scheme (Callable[[np.ndarray], float] | None) – A function mapping a vector to a single value. This value gives the position in the color gradient defined using min_color_scheme_value, max_color_scheme_value and colors.

min_color_scheme_value (float) – The value of the color_scheme function to be mapped to the first color in colors. Lower values also result in the first color of the gradient.

max_color_scheme_value (float) – The value of the color_scheme function to be mapped to the last color in colors. Higher values also result in the last color of the gradient.

colors (Sequence[ParsableManimColor]) – The colors defining the color gradient of the vector field.

kwargs – Additional arguments to be passed to the VGroup constructor

Methods

fit_to_coordinate_system

Scale the vector field to fit a coordinate system.

get_colored_background_image

Generate an image that displays the vector field.

get_nudge_updater

Get an update function to move a Mobject along the vector field.

get_vectorized_rgba_gradient_function

Generates a gradient of rgbas as a numpy array

nudge

Nudge a Mobject along the vector field.

nudge_submobjects

Apply a nudge along the vector field to all submobjects.

scale_func

Scale a vector field function.

shift_func

Shift a vector field function.

start_submobject_movement

Start continuously moving all submobjects along the vector field.

stop_submobject_movement

Stops the continuous movement started using start_submobject_movement().

Attributes

animate

Used to animate the application of any method of self.

animation_overrides

color

depth

The depth of the mobject.

fill_color

If there are multiple colors (for gradient) this returns the first one

height

The height of the mobject.

n_points_per_curve

sheen_factor

stroke_color

width

The width of the mobject.

_original__init__(func, color=None, color_scheme=None, min_color_scheme_value=0, max_color_scheme_value=2, colors=[ManimColor('#236B8E'), ManimColor('#83C167'), ManimColor('#FFFF00'), ManimColor('#FC6255')], **kwargs)
Initialize self. See help(type(self)) for accurate signature.

Parameters:
func (Callable[[np.ndarray], np.ndarray])

color (ParsableManimColor | None)

color_scheme (Callable[[np.ndarray], float] | None)

min_color_scheme_value (float)

max_color_scheme_value (float)

colors (Sequence[ParsableManimColor])

fit_to_coordinate_system(coordinate_system)[source]
Scale the vector field to fit a coordinate system.

This method is useful when the vector field is defined in a coordinate system different from the one used to display the vector field.

This method can only be used once because it transforms the origin of each vector.

Parameters:
coordinate_system (CoordinateSystem) – The coordinate system to fit the vector field to.

get_colored_background_image(sampling_rate=5)[source]
Generate an image that displays the vector field.

The color at each position is calculated by passing the positing through a series of steps: Calculate the vector field function at that position, map that vector to a single value using self.color_scheme and finally generate a color from that value using the color gradient.

Parameters:
sampling_rate (int) – The stepsize at which pixels get included in the image. Lower values give more accurate results, but may take a long time to compute.

Returns:
The vector field image.

Return type:
Image.Imgae

get_nudge_updater(speed=1, pointwise=False)[source]
Get an update function to move a Mobject along the vector field.

When used with add_updater(), the mobject will move along the vector field, where its speed is determined by the magnitude of the vector field.

Parameters:
speed (float) – At speed=1 the distance a mobject moves per second is equal to the magnitude of the vector field along its path. The speed value scales the speed of such a mobject.

pointwise (bool) – Whether to move the mobject along the vector field. See nudge() for details.

Returns:
The update function.

Return type:
Callable[[Mobject, float], Mobject]

get_vectorized_rgba_gradient_function(start, end, colors)[source]
Generates a gradient of rgbas as a numpy array

Parameters:
start (float) – start value used for inverse interpolation at inverse_interpolate()

end (float) – end value used for inverse interpolation at inverse_interpolate()

colors (Iterable[ParsableManimColor]) – list of colors to generate the gradient

Return type:
function to generate the gradients as numpy arrays representing rgba values

nudge(mob, dt=1, substeps=1, pointwise=False)[source]
Nudge a Mobject along the vector field.

Parameters:
mob (Mobject) – The mobject to move along the vector field

dt (float) – A scalar to the amount the mobject is moved along the vector field. The actual distance is based on the magnitude of the vector field.

substeps (int) – The amount of steps the whole nudge is divided into. Higher values give more accurate approximations.

pointwise (bool) – Whether to move the mobject along the vector field. If False the vector field takes effect on the center of the given Mobject. If True the vector field takes effect on the points of the individual points of the Mobject, potentially distorting it.

Returns:
This vector field.

Return type:
VectorField

Examples

Example: Nudging 

from manim import *

class Nudging(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[1] / 2) * RIGHT + np.cos(pos[0] / 2) * UP
        vector_field = ArrowVectorField(
            func, x_range=[-7, 7, 1], y_range=[-4, 4, 1], length_func=lambda x: x / 2
        )
        self.add(vector_field)
        circle = Circle(radius=2).shift(LEFT)
        self.add(circle.copy().set_color(GRAY))
        dot = Dot().move_to(circle)

        vector_field.nudge(circle, -2, 60, True)
        vector_field.nudge(dot, -2, 60)

        circle.add_updater(vector_field.get_nudge_updater(pointwise=True))
        dot.add_updater(vector_field.get_nudge_updater())
        self.add(circle, dot)
        self.wait(6)
Make interactive
nudge_submobjects(dt=1, substeps=1, pointwise=False)[source]
Apply a nudge along the vector field to all submobjects.

Parameters:
dt (float) – A scalar to the amount the mobject is moved along the vector field. The actual distance is based on the magnitude of the vector field.

substeps (int) – The amount of steps the whole nudge is divided into. Higher values give more accurate approximations.

pointwise (bool) – Whether to move the mobject along the vector field. See nudge() for details.

Returns:
This vector field.

Return type:
VectorField

static scale_func(func, scalar)[source]
Scale a vector field function.

Parameters:
func (Callable[[ndarray], ndarray]) – The function defining a vector field.

scalar (float) – The scalar to be applied to the vector field.

Return type:
Callable[[ndarray], ndarray]

Examples

Example: ScaleVectorFieldFunction 

from manim import *

class ScaleVectorFieldFunction(Scene):
    def construct(self):
        func = lambda pos: np.sin(pos[1]) * RIGHT + np.cos(pos[0]) * UP
        vector_field = ArrowVectorField(func)
        self.add(vector_field)
        self.wait()

        func = VectorField.scale_func(func, 0.5)
        self.play(vector_field.animate.become(ArrowVectorField(func)))
        self.wait()
Make interactive
Returns:
The scaled vector field function.

Return type:
Callable[[np.ndarray], np.ndarray]

Parameters:
func (Callable[[ndarray], ndarray])

scalar (float)

static shift_func(func, shift_vector)[source]
Shift a vector field function.

Parameters:
func (Callable[[ndarray], ndarray]) – The function defining a vector field.

shift_vector (ndarray) – The shift to be applied to the vector field.

Returns:
The shifted vector field function.

Return type:
Callable[[np.ndarray], np.ndarray]

start_submobject_movement(speed=1, pointwise=False)[source]
Start continuously moving all submobjects along the vector field.

Calling this method multiple times will result in removing the previous updater created by this method.

Parameters:
speed (float) – The speed at which to move the submobjects. See get_nudge_updater() for details.

pointwise (bool) – Whether to move the mobject along the vector field. See nudge() for details.

Returns:
This vector field.

Return type:
VectorField

stop_submobject_movement()[source]
Stops the continuous movement started using start_submobject_movement().

Returns:
This vector field.

Return type:
VectorField






