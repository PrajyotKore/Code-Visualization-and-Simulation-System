import subprocess
import os
import re


def extract_manim_code(llama_output):
    """
    Extracts the Manim code from the Llama output string with enhanced error handling.
    
    Args:
        llama_output (str): The output string generated by Llama.
        
    Returns:
        str: The extracted Manim code.
        
    Raises:
        ValueError: If no valid Python code is found or if the output format is invalid.
    """
    # Try multiple patterns to find the code
    patterns = [
        r"```python\n(.*?)\n```",  # Standard markdown code block
        # r"```\n(.*?)\n```",        # Code block without language
        # r'\"code"\s*:\s*"(.*?)"',  # JSON format
        # r"class\s+\w+\(Scene\).*?def\s+construct.*?}",  # Direct Manim class pattern
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, llama_output, re.DOTALL)
        if matches:
            # Clean up the found code
            code = matches[0].strip()
            # Validate that it looks like Manim code
            if "Scene" in code and "construct" in code:
                return code
    
    # If we get here, try to salvage any Python-like content
    lines = llama_output.split('\n')
    code_lines = []
    in_code_block = False
    
    for line in lines:
        if 'class' in line and 'Scene' in line:
            in_code_block = True
        if in_code_block:
            code_lines.append(line)
        if in_code_block and line.strip() == '}':
            break
    
    if code_lines:
        return '\n'.join(code_lines)
    
    raise ValueError(
        "Could not extract valid Manim code. Please ensure the model output contains "
        "properly formatted Python code for Manim visualization."
    )
    

def save_and_run_manim_script(manimScript, filename="sample/sample_manim_script.py"):
    """
    Saves the given Manim script to a Python file and runs the file with Manim.

    Args:
        manimScript (str): The Manim code as a string.
        filename (str): The filename where the Manim code should be saved.

    Returns:
        dict: A dictionary containing the result. If successful, 'output' key will contain the process output.
              If there is an error, 'error' key will contain the error message.
    """
    result = {"manimScript": manimScript, "output": None, "error": None}

    # Step 1: Save the Manim script to a Python file
    try:
        os.makedirs(os.path.dirname(filename), exist_ok=True)  # Create the directory if it doesn't exist
        with open(filename, "w") as file:
            file.write(manimScript)
        print(f"Manim script saved to {filename}")
    except Exception as e:
        result["error"] = f"Error saving the Manim script: {e}"
        return result

    # Step 2: Run the saved Python file using Manim
    try:
        process_result = subprocess.run(
            ["manim", "-pql", filename, "sample_manim"],
            check=True,
            capture_output=True,
            text=True
        )
        result["output"] = process_result.stdout
    except subprocess.CalledProcessError as e:
        result["error"] = f"Error running the Manim script: {e.stderr}"
    except FileNotFoundError:
        result["error"] = "Manim executable not found. Ensure that Manim is installed and added to the system PATH."
    except Exception as e:
        result["error"] = f"Unexpected error: {e}"

    return result
